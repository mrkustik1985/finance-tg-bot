from aiogram import Router
from aiogram.dispatcher.filters.text import Text
from aiogram.types import Message
import data.data_base as db
import data.user_info as ui
import parsing.parser as ps
from keyboards.main_menu import get_next_news_menu, get_main_menu


router = Router()
@router.message(Text(text = "–ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"))
async def answer_news(message: Message):
    if len(db.economic_news_info) == 0:
        await ps.rbk_economics_news()
    usr_id = str(message.from_user.id)
    news_need = ui.users_news_progress.get(usr_id, -1) + 1
    ui.users_news_progress[usr_id] = news_need
    if news_need == len(db.economic_news_info):
        message.answer("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã ‚úÖ‚úÖ‚úÖ\n–ù–∞—á–∏–Ω–∞—é —Å –Ω–∞—á–∞–ª–∞.")
        ui.users_news_progress[usr_id] = 0
        news_need = 0
    need = None
    for news in db.economic_news_info.items():
        need = news[1]
        if news_need == 0:
            break
        news_need -= 1
    await message.answer(
        f"{need}",
        parse_mode="html",
        reply_markup=get_next_news_menu()
    )

@router.message(Text(text = "–ö—É—Ä—Å $ –∏ ‚Ç¨"))
async def get_currency(message: Message):
    if len(db.bax_rates_info) == 0 or 'üÜò' in db.bax_rates_info[0]:
        db.bax_rates_info.clear()
        db.euro_rates_info.clear()
        await ps.get_exchange_rate()
    mes =  "–í—á–µ—Ä–∞:          1üíµ = " + db.bax_rates_info[0] + "       1üí∂ = " + db.euro_rates_info[0] + "\n"
    mes += "–ü–æ–∑–∞–≤—á–µ—Ä–∞: 1üíµ = " + db.bax_rates_info[1] + "       1üí∂ = " + db.euro_rates_info[1]
    await message.answer(mes)

@router.message(Text(text = "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"))
async def answer_news(message: Message):
    if len(db.economic_news_info) == 0:
        await ps.rbk_economics_news()
    usr_id = str(message.from_user.id)
    news_need = ui.users_news_progress.get(usr_id, -1) + 1
    ui.users_news_progress[usr_id] = news_need
    if news_need == len(db.economic_news_info):
        message.answer("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã ‚úÖ‚úÖ‚úÖ\n–ù–∞—á–∏–Ω–∞—é —Å –Ω–∞—á–∞–ª–∞.")
        ui.users_news_progress[usr_id] = 0
        news_need = 0
    need = None
    for news in db.economic_news_info.items():
        need = news[1]
        if news_need == 0:
            break
        news_need -= 1
    await message.answer(
        f"{need}",
        parse_mode="html",
        reply_markup=get_next_news_menu()
    )